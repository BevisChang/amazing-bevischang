syntax = "proto3";

option go_package = "github.com/AmazingTalker/bevis-chang/pkg/pb";

package pb;

import "third_party/google/api/annotations.proto";
import "third_party/gogoproto/gogo.proto";
import "third_party/amazingtalker/atproto.proto";

import "google/protobuf/timestamp.proto";

service BevisChang {
    // Health check api for k8s.
    rpc Health(HealthReq) returns (HealthRes) {
        option (google.api.http) = {
            get: "/health"
        };
    }

    rpc Config(ConfigReq) returns (ConfigRes) {
        option (google.api.http) = {
            get: "/config"
        };
    }

    rpc CreateRecord(CreateRecordReq) returns (CreateRecordRes) {
    option (google.api.http) = {
            post: "/api/record"
            body: "record"
        };
    }

    rpc GetRecord(GetRecordReq) returns (GetRecordRes) {
        option (google.api.http) = {
            get: "/api/records/:id"
            body: "record"
        };
    }

    rpc ListRecord(ListRecordReq) returns (ListRecordRes) {
        option (google.api.http) = {
            get: "/api/records"
            body: "records"
        };
    }

    rpc CreateMember(CreateMemberReq) returns (CreateMemberRes) {
        option (google.api.http) = {
            post: "/api/members"
            body: "member"
        };
    }

    rpc UpdateMember(UpdateMemberReq) returns (UpdateMemberRes) {
        option (google.api.http) = {
            put: "/api/members/:id"
        };
    }

    rpc ListMembers(ListMembersReq) returns (ListMembersRes) {
        option (google.api.http) = {
            get: "/api/members"
            body: "member"
        };
    }

    rpc DeleteMember(DeleteMemberReq) returns (DeleteMemberRes) {
        option (google.api.http) = {
            delete: "/api/members/:id"
        };
    }
}

message Record {
    string id = 1 [(gogoproto.customname) = "ID"];
    int64 the_num = 2 [(gogoproto.customname) = "TheNum", (gogoproto.jsontag) = "theNum"];
    string the_str = 3 [(gogoproto.customname) = "TheStr", (gogoproto.jsontag) = "theStr"];
    google.protobuf.Timestamp created_at = 4 [(gogoproto.stdtime) = true, (gogoproto.customname) = "CreatedAt", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "createdAt"];
    google.protobuf.Timestamp updated_at = 5 [(gogoproto.stdtime) = true, (gogoproto.customname) = "UpdatedAt", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "updatedAt"];
}

message HealthReq { }

message HealthRes {
    bool ok = 1;
}

message ConfigReq { }

message ConfigRes {
    bool enable = 1;
    int64 num = 2;
    string str = 3;
}

message CreateRecordReq {
    int64 the_num = 1 [(gogoproto.customname) = "TheNum", (gogoproto.jsontag) = "theNum"];
    string the_str = 2 [(gogoproto.customname) = "TheStr", (gogoproto.jsontag) = "theStr"];
    google.protobuf.Timestamp created_at = 3 [(gogoproto.stdtime) = true, (gogoproto.customname) = "CreatedAt", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "createdAt"];
}

message CreateRecordRes {
    option (atproto.success_http_status) = "201";
    Record record = 1  [(gogoproto.customname) = "Record"];
}

message GetRecordReq {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.jsontag) = "id", (atproto.frparams) = "true"];
}

message GetRecordRes {
    option (atproto.success_http_status) = "200";
    Record record = 1  [(gogoproto.customname) = "Record"];
}

message ListRecordReq {
    // keys from url queryString or url params is always type of string.
    string size = 1 [(gogoproto.customname) = "PageSize", (gogoproto.jsontag) = "size", (atproto.frquery) = "true", (gogoproto.moretags)='validate:"required"'];
    string page = 2 [(gogoproto.customname) = "Page", (gogoproto.jsontag) = "page", (atproto.frquery) = "true", (gogoproto.moretags)='validate:"required"'];
}

message ListRecordRes {
    option (atproto.success_http_status) = "200";
    repeated Record records = 1  [(gogoproto.customname) = "Records"];
}

message Member {
    int64 id = 1 [(gogoproto.customname) = "ID"];
    string name = 2 [(gogoproto.customname) = "Name", (gogoproto.jsontag) = "name"];
    google.protobuf.Timestamp birthday = 3 [(gogoproto.stdtime) = true, (gogoproto.customname) = "Birthday", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "birthday"];
    google.protobuf.Timestamp created_at = 4 [(gogoproto.stdtime) = true, (gogoproto.customname) = "CreatedAt", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "createdAt"];
    google.protobuf.Timestamp updated_at = 5 [(gogoproto.stdtime) = true, (gogoproto.customname) = "UpdatedAt", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "updatedAt"];
}

message CreateMemberReq {
    string name = 1 [(gogoproto.customname) = "Name", (gogoproto.jsontag) = "name"];
    google.protobuf.Timestamp birthday = 2 [(gogoproto.stdtime) = true, (gogoproto.customname) = "Birthday", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "birthday"];
}

message CreateMemberRes {
    option (atproto.success_http_status) = "200";
     Member member = 1 [(gogoproto.customname) = "Member"];
}

message UpdateMemberReq {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.jsontag) = "id", (atproto.frparams) = "true"];
    string name = 2 [(gogoproto.customname) = "Name", (gogoproto.jsontag) = "name"];
    google.protobuf.Timestamp birthday = 3 [(gogoproto.stdtime) = true, (gogoproto.customname) = "Birthday", (gogoproto.wktpointer) = true, (gogoproto.jsontag) = "birthday"];
}

message UpdateMemberRes {
    option (atproto.success_http_status) = "200";
     Member member = 1 [(gogoproto.customname) = "Member"];
}

message ListMembersReq {
    string birthdayBefore = 1 [(gogoproto.customname) = "BirthdayBefore", (gogoproto.jsontag) = "birthdayBefore", (atproto.frquery) = "true", (gogoproto.moretags)='validate:"required"'];
}

message ListMembersRes {
    option (atproto.success_http_status) = "200";
    repeated Member member = 1 [(gogoproto.customname) = "Member"];
}

message DeleteMemberReq {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.jsontag) = "id", (atproto.frparams) = "true"];
}

message DeleteMemberRes {
    option (atproto.success_http_status) = "200";
}
